name: Check Quality and Test

on:
  pull_request:
    branches: [main]

env:
  # Used for linting, docker images, and docs.
  MAIN_PYTHON_VERSION: 3.11


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      # The installation is required as mypy must be run in the local system environment, not in the pre-commit environment.
      - name: Install required dependencies
        run: |
          uv sync --all-extras

      - name: Linting and static code checks
        continue-on-error: true
        id: pre-commit-first-run
        run: |
          pre-commit run --all-files

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        id: auto-commit-action
        with:
          create_branch: false
          commit_message: Linting and static code checks

      # If the first run failed, run the checks again to ensure that the changes are correct.
      - name: Linting and static code checks try 2
        if: steps.pre-commit-first-run.outcome != 'success'
        run: |
          pre-commit run --all-files

  checks:
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          # Python 3.11 is assumed to be covered by testing 3.10 and 3.12
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v3
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('uv.lock') }}

      - run: uv sync --all-extras

      - name: Run unit tests
        run: export PYTHONPATH=$PYTHONPATH:$(pwd); uv run pytest tests/tests_unit

  build-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade --upgrade-strategy eager --no-cache-dir .[docs]

      - name: Build documentation
        run: |
          mkdocs build


  coverage:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('uv.lock') }}

      - run: uv sync --all-extras

      - name: Create test coverage report
        env:
          CDF_CLUSTER: ${{ vars.CDF_CLUSTER }}
          CDF_PROJECT: ${{ vars.CDF_PROJECT }}
          IDP_CLIENT_ID: ${{ vars.IDP_CLIENT_ID }}
          IDP_CLIENT_SECRET: ${{ secrets.IDP_CLIENT_SECRET }}
          IDP_TENANT_ID: ${{ secrets.IDP_TENANT_ID }}
        run: export PYTHONPATH=$PYTHONPATH:$(pwd); uv run pytest --cov=cognite/ --cov-config=pyproject.toml --cov-report=xml:coverage.xml tests/

      - name: Push coverage report to PR
        uses: orgoro/coverage@v3.1
        with:
            coverageFile: coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
            thresholdAll: 0.8

  validate-description:
    name: Validate PR description
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install core dependencies
        run: uv sync --all-extras
      - name: Dump description to file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const description = context.payload.pull_request.body;
            fs.writeFileSync('last_git_message.txt', description);
      - name: Validate Changelog section in PR description
        run: uv run python dev.py changelog
