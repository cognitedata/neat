---
name: Release NEAT

on:
  push:
    branches:
      - experimental

env:
  PYTHON_VERSION: "3.11"

jobs:
  release-to-pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install core dependencies
        run: uv sync --all-extras

      - name: Dump last commit message to file
        run: git log -1 --pretty=%B > last_git_message.txt
      - name: Dump last tag to file
        run: git describe --tags --abbrev=0 > last_version.txt
      - name: Bump Version
        run: uv run python dev.py bump --verbose
      - id: version
        name: Read the new version
        # Read the version from the cognite/neat/_version.py file
        run: |
          echo "version=$(sed -n 's/^__version__ = "\(.*\)"/\1/p' cognite/neat/_version.py)" >> $GITHUB_ENV
          echo "Version extracted: $version"

      # experimental steps
      - name: Generate experimental version and override pyproject.toml
        id: versioning
        run: |
          cat pyproject.toml > pyproject.base.toml

          DATE_SUFFIX=$(date +'%Y%m%d.%H%M%S')
          EXPERIMENTAL_VERSION="${version}-experimental-${DATE_SUFFIX}"

          echo "EXPERIMENTAL_VERSION=$EXPERIMENTAL_VERSION" >> $GITHUB_ENV
          echo "EXPERIMENTAL_TAG=v${VERSION}-experimental.${DATE_SUFFIX}" >> $GITHUB_ENV

          echo "[project]" > pyproject.override.toml
          echo "name = 'cognite-neat-experimental'" >> pyproject.override.toml
          echo "version = '${EXPERIMENTAL_VERSION}'" >> pyproject.override.toml

      - name: Replace pyproject.toml temporarily
        run: |
          cp pyproject.override.toml pyproject.toml

      - name: Create CHANGELOG entry
        if: env.version != '0.0.0'
        run: uv run python dev.py changelog

      - name: Build package
        if: env.version != '0.0.0'
        run: uv build

      - name: Restore original pyproject.toml
        run: |
          mv pyproject.base.toml pyproject.toml

      - name: Check built package metadata
        run: |
          twine check dist/*
          unzip -p dist/*.whl METADATA | grep -E '^(Name|Version):'

      # - name: Release to PyPI
      #   if: env.version != '0.0.0'
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      #   run: uv run twine upload --skip-existing --verbose dist/*

      # - name: Add entry to CHANGELOG
      #   if: env.version != '0.0.0'
      #   uses: ncipollo/release-action@v1
      #   with:
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #       prerelease: false
      #       draft: false
      #       tag: ${{ EXPERIMENTAL_TAG }}
      #       bodyFile: last_changelog_entry.md


